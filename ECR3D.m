%****************************************************************************
%计算3D空间中ECR放电的过程，方法为PIC-MCC
%****************************************************************************

clear variables;
clc;

global m_e q_e 
%****************************************************************************
%定义基础参数
%****************************************************************************
m_e = 9.109e-31;        %电子质量
q_e = -1.602e-19;       %电子电量
AMU = 1.661e-27;        %质子质量，单位：kg
EPS0 = 8.854e-12;       %真空中的介电常数，单位：F/m
MU0 = 4*pi()*1e-7;      %真空中的磁导率，单位：H/m
k = 1.38e-23;           %玻尔兹曼常数，单位：J/K
c = 3e8;                %光速，单位：m/s
E_i_Li1 = 5.4;          %Li0->Li1的电离能，单位：eV
E_i_Li2 = 75.77;        %Li1->Li2的电离能，单位：eV
E_i_Li3 = 122.664;      %Li2->Li3的电离能，单位：eV
m_Li = 7*AMU;           %锂单质质量
Z = 0.135;              %Z轴范围，单位：m
R = 0.025;              %放电室半径，单位：m
P = 1;                  %离子源内的压强设置为1Pa
V = pi()*R^2*Z;         %离子源放电室的体积，单位：m^3
T = 273.15+300;         %源内的温度设为300℃
n = P/k/T;              %源内中性原子的数密度，根据理想气体方程P=nkT得出
dt_e = 1.5e-12;         %电子运动时间步长
dt_i = 3.0e-10;         %离子运动时间步长
dg = 0.0005;            %单元网格的长度，单位：m
step_num_i = 600;       %离子的时间步数
N_grid_x = (R-(-R))/0.0005+1;   %x方向的格点数
N_grid_y = (R-(-R))/0.0005+1;   %y方向的格点数
N_grid_z = (Z-0)/0.0005+1;      %z方向的格点数
spwt_e = 1e6;                   %每个宏粒子代表的实际电子个数
spwt_i = 1e6;                   %每个宏粒子代表的实际离子个数
N_e = 1000;                     %初始电子数目为1000个
N_Li1 = N_e;                    %初始离子数目，满足初始电中性条件
max_part = 100000;              %粒子容器的最大值
vth_e = c^2-(c/(-q_e*0.01/m_e/c^2+1)^2);    %电子的热速度，设为2 eV
T_e_ini = 0.1;                              %电子的初始平均能量，单位：eV
T_Li1_ini = 0.25;                           %Li+的初始平均能量，单位：eV
B_x = zeros(N_grid_x,N_grid_y,N_grid_z);    %格点上的Bx预分配空间
B_y = zeros(N_grid_x,N_grid_y,N_grid_z);    %格点上的By预分配空间
B_z = zeros(N_grid_x,N_grid_y,N_grid_z);    %格点上的Bz预分配空间
E_x = zeros(N_grid_x,N_grid_y,N_grid_z);    %格点上的Ex预分配空间
E_y = zeros(N_grid_x,N_grid_y,N_grid_z);    %格点上的Ey预分配空间
E_z = zeros(N_grid_x,N_grid_y,N_grid_z);    %格点上的Ez预分配空间
% B_e = zeros(N_e,3); %电子所在位置处的磁感应强度
% E_e = zeros(N_e,3); %电子所在位置处的电场强度
% B_Li1 = zeros(N_i,3); %Li+所在位置处的磁感应强度
% E_Li1 = zeros(N_i,3); %Li+所在位置处的电场强度
pos_e = zeros(max_part,3); %给电子的位置预分配空间
vel_e = zeros(max_part,3); %给电子的速度预分配空间
pos_Li1 = zeros(max_part,3); %给离子的位置预分配空间
vel_Li1 = zeros(max_part,3); %给离子的速度预分配空间

load magnetic.txt;         %载入磁场数据
load sigma.txt;            %载入电离截面数据
len_B = length(magnetic);  %确定磁场数据的行数
len_s = length(sigma);     %确定电离截面数据的行数


%****************************************************************************
%将磁场数据都分配到格点上
%****************************************************************************
for i = 1:len_B
    in_x = (magnetic(i,1)-(-R))/0.0005+1; %x方向网格的格点序号
    in_x = round(in_x); %取整
    in_y = (magnetic(i,2)-(-R))/0.0005+1; %y方向网格的格点序号
    in_y = round(in_y); %取整
    in_z = (magnetic(i,3)-0)/0.0005+1; %z方向网格的格点序号
    in_z = round(in_z); %取整
    B_x(in_x,in_y,in_z) = magnetic(i,4); %将x方向的磁感应强度分配到网格上
    B_y(in_x,in_y,in_z) = magnetic(i,5); %将y方向的磁感应强度分配到网格上
    B_z(in_x,in_y,in_z) = magnetic(i,6); %将z方向的磁感应强度分配到网格上
    fprintf('there is %d data left to load, please be patient\n', len_B-i);
end
clc;
fprintf('Congratulations! All the magnetic data has been loaded!\n');

%****************************************************************************
%给定初始电子和离子的初速度和初位置
%****************************************************************************

% vel_e=sampleIsotropicVel(vth_e,N_e); %调用子函数给每个电子分配服从麦克斯韦分布且在4π角度各向同性的速度

theta_pos = 2*pi()*rand(N_e,2);                                                                           %选定一个随意角度
R_pos = R*rand(N_e,2);                                                                                    %粒子的径向位置
pos_e(1:N_e,:) = [R_pos(:,1).*cos(theta_pos(:,1)),R_pos(:,1).*sin(theta_pos(:,1)),Z*rand(N_e,1)];         %电子的初始位置
pos_Li1(1:N_Li1,:) = [R_pos(:,2).*cos(theta_pos(:,2)),R_pos(:,2).*sin(theta_pos(:,2)),Z*rand(N_e,1)];     %离子的初始位置
vel_e(1:N_e,:) = randraw('maxwell',sqrt(T_e_ini*-q_e/m_e),N_e).*random_unit_vector(3,N_e)';                %设置初始电子的速度，使之服从麦克斯韦分布，且各向同性
vel_Li1(1:N_Li1,:) = randraw('maxwell',sqrt(T_Li1_ini*-q_e/m_Li),N_Li1).*random_unit_vector(3,N_Li1)';     %设置初始Li+的速度，使之服从麦克斯韦分布，且各向同性


%****************************************************************************
%开始主循环
%****************************************************************************

for ts = 1:step_num_i
   chg = zeros(N_grid_x,N_grid_y,N_grid_z);      %创建三维数组用于存放每个格点上的电荷比例，行 列 页
   for p = 1:N_e                    %遍历每个电子
       fi=1+(pos_e(p,:)-[-R,-R,0])/dg;            %实际格点位置，为浮点数
       i=floor(fi);               %对应整数格点位置
       h=fi-i;                   %粒子与第i个格点之间的距离占距离步长的比例
       
       %将电子电荷按照比例分配到临近的8个格点上
       chg(i(1,1),i(1,2),i(1,3))=chg(i(1,1),i(1,2),i(1,3))+(1-h(1,1))*(1-h(1,2))*(1-h(1,3));      %分配到第(x,y,z)个格点上的电荷比例
       chg(i(1,1)+1,i(1,2),i(1,3))=chg(i(1,1)+1,i(1,2),i(1,3))+h(1,1)*(1-h(1,2))*(1-h(1,3));      %分配到第(x+1,y,z)个格点上的电荷比例
       chg(i(1,1)+1,i(1,2)+1,i(1,3))=chg(i(1,1)+1,i(1,2)+1,i(1,3))+h(1,1)*h(1,2)*(1-h(1,3));      %分配到第(x+1,y+1,z)个格点上的电荷比例
       chg(i(1,1)+1,i(1,2)+1,i(1,3)+1)=chg(i(1,1)+1,i(1,2)+1,i(1,3)+1)+h(1,1)*h(1,2)*h(1,3);      %分配到第(x+1,y+1,z+1)个格点上的电荷比例
       chg(i(1,1),i(1,2)+1,i(1,3))=chg(i(1,1),i(1,2)+1,i(1,3))+(1-h(1,1))*h(1,2)*(1-h(1,3));      %分配到第(x,y+1,z)个格点上的电荷比例
       chg(i(1,1),i(1,2)+1,i(1,3)+1)=chg(i(1,1),i(1,2)+1,i(1,3)+1)+(1-h(1,1))*h(1,2)*h(1,3);      %分配到第(x,y+1,z+1)个格点上的电荷比例
       chg(i(1,1),i(1,2),i(1,3)+1)=chg(i(1,1),i(1,2),i(1,3)+1)+(1-h(1,1))*(1-h(1,2))*h(1,3);      %分配到第(x,y,z+1)个格点上的电荷比例
       chg(i(1,1)+1,i(1,2),i(1,3)+1)=chg(i(1,1)+1,i(1,2),i(1,3)+1)+h(1,1)*(1-h(1,2))*h(1,3);      %分配到第(x+1,y,z+1)个格点上的电荷比例
   end
    
   %每个格点上电子的电荷密度
   den = spwt_e*q_e*chg/(dg*dg*dg);
   
   for p = 1:N_Li1
       fi=1+(pos_Li1(p,:)-[-R,-R,0])/dg;            %实际格点位置，为浮点数
       i=floor(fi);               %对应整数格点位置
       h=fi-i;                   %粒子与第i个格点之间的距离占距离步长的比例
       
       %将Li+电荷按照比例分配到临近的8个格点上
       chg(i(1,1),i(1,2),i(1,3))=chg(i(1,1),i(1,2),i(1,3))+(1-h(1,1))*(1-h(1,2))*(1-h(1,3));      %分配到第(x,y,z)个格点上的电荷比例
       chg(i(1,1)+1,i(1,2),i(1,3))=chg(i(1,1)+1,i(1,2),i(1,3))+h(1,1)*(1-h(1,2))*(1-h(1,3));      %分配到第(x+1,y,z)个格点上的电荷比例
       chg(i(1,1)+1,i(1,2)+1,i(1,3))=chg(i(1,1)+1,i(1,2)+1,i(1,3))+h(1,1)*h(1,2)*(1-h(1,3));      %分配到第(x+1,y+1,z)个格点上的电荷比例
       chg(i(1,1)+1,i(1,2)+1,i(1,3)+1)=chg(i(1,1)+1,i(1,2)+1,i(1,3)+1)+h(1,1)*h(1,2)*h(1,3);      %分配到第(x+1,y+1,z+1)个格点上的电荷比例
       chg(i(1,1),i(1,2)+1,i(1,3))=chg(i(1,1),i(1,2)+1,i(1,3))+(1-h(1,1))*h(1,2)*(1-h(1,3));      %分配到第(x,y+1,z)个格点上的电荷比例
       chg(i(1,1),i(1,2)+1,i(1,3)+1)=chg(i(1,1),i(1,2)+1,i(1,3)+1)+(1-h(1,1))*h(1,2)*h(1,3);      %分配到第(x,y+1,z+1)个格点上的电荷比例
       chg(i(1,1),i(1,2),i(1,3)+1)=chg(i(1,1),i(1,2),i(1,3)+1)+(1-h(1,1))*(1-h(1,2))*h(1,3);      %分配到第(x,y,z+1)个格点上的电荷比例
       chg(i(1,1)+1,i(1,2),i(1,3)+1)=chg(i(1,1)+1,i(1,2),i(1,3)+1)+h(1,1)*(1-h(1,2))*h(1,3);      %分配到第(x+1,y,z+1)个格点上的电荷比例
   end
   den = den+spwt_i*(-q_e)*chg/(dg*dg*dg);      %每个格点上总的电荷密度
end
